{"version":3,"sources":["services/axios.ts","services/context.ts","styles/GlobalStyle.ts","styles/Status.ts","Components/Status.tsx","styles/Header.ts","Components/Header/Header.tsx","styles/Users.ts","Components/Users/UsersCards.tsx","Components/Users/Users.tsx","Components/App.tsx","index.tsx"],"names":["axios","Axios","create","Context","createContext","usersList","GlobalStyle","createGlobalStyle","StatusMessage","styled","div","Text","p","Status","message","spinner","Container","Spinner","animation","role","variant","className","HeaderWrapper","header","HeaderInner","InnerText","span","InnerIcon","Header","aria-label","MyTable","Table","UsersSearch","input","Card","CardImg","CardInfo","InfoInline","InlineName","InlineRegistered","InfoBlock","BlockMail","UsersCards","listProps","useContext","map","registered","date","age","email","name","first","last","medium","picture","src","alt","moment","format","Users","striped","bordered","hover","responsive","type","placeholder","App","useState","setUsersList","error","setError","loaded","setLoaded","useEffect","get","then","response","data","length","results","catch","err","request","Provider","value","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3dde367.chunk.js","sourcesContent":["import Axios, { AxiosInstance } from \"axios\";\r\n\r\nconst axios: AxiosInstance = Axios.create();\r\n\r\nexport default axios;","import { createContext } from 'react';\r\nimport { IContext } from '../interfaces/interface';\r\n\r\n\r\nconst Context = createContext<IContext>({\r\n    usersList: []\r\n}); \r\n\r\nexport default Context;","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    *, *:before, *:after {\r\n        box-sizing: border-box;\r\n        font-family: 'Lato', sans-serif;\r\n        font-size: 24px;\r\n        outline: none;\r\n    }\r\n\r\n    html, body, div, span, applet, object, iframe,\r\n    h1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\n    a, abbr, acronym, address, big, cite, code,\r\n    del, dfn, em, img, ins, kbd, q, s, samp,\r\n    small, strike, strong, sub, sup, tt, var,\r\n    b, u, i, center,\r\n    dl, dt, dd, ol, ul, li,\r\n    fieldset, form, label, legend,\r\n    table, caption, tbody, tfoot, thead, tr, th, td,\r\n    article, aside, canvas, details, embed, \r\n    figure, figcaption, footer, header, hgroup, \r\n    menu, nav, output, ruby, summary,\r\n    time, mark, audio, video {\r\n        margin: 0;\r\n        padding: 0;\r\n        border: 0;\r\n    }\r\n\r\n    a {\r\n        text-decoration: none;\r\n    }\r\n\r\n    article, aside, details, figcaption, figure, \r\n    footer, header, hgroup, menu, nav, section {\r\n        display: block;\r\n    }\r\n\r\n    a:active {\r\n        color: inherit;\r\n    }\r\n\r\n    ol, ul {\r\n        list-style: none;\r\n    }\r\n\r\n    body {\r\n        &::-webkit-scrollbar { \r\n            width: 10px;\r\n        }\r\n    \r\n        &::-webkit-scrollbar-track-piece { \r\n            background-color: gray;\r\n        }\r\n    \r\n        &::-webkit-scrollbar-thumb { \r\n            background-color: #006B53;\r\n            border-radius: 15px;\r\n            height: 100px;\r\n        }\r\n    }\r\n\r\n    blockquote, q {\r\n        quotes: none;\r\n    }\r\n\r\n    blockquote:before, blockquote:after,\r\n    q:before, q:after {\r\n        content: '';\r\n        content: none;\r\n    }\r\n\r\n    table {\r\n        border-collapse: collapse;\r\n        border-spacing: 0;\r\n    }\r\n\r\n    textarea {\r\n        &::-webkit-scrollbar { \r\n            width: 0; \r\n        }\r\n    }\r\n\r\n    time {\r\n        font-size: inherit;\r\n    }\r\n`","import styled from 'styled-components';\r\n\r\n\r\nexport const StatusMessage = styled.div`\r\n    text-align: center;\r\n    margin-top: 14vh;\r\n    font-size: 2em;\r\n\r\n    @media screen and (max-width: 770px) {\r\n        font-size: 1.3em;\r\n    }\r\n`\r\n\r\nexport const Text = styled.p`\r\n    padding: 0 1em;\r\n    font-size: 0.7em;\r\n`\r\n","import Container from 'react-bootstrap/Container';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport { IStatus } from '../interfaces/interface';\r\n\r\nimport { StatusMessage, Text } from '../styles/Status';\r\n\r\n\r\nexport const Status = ({ message, spinner }: IStatus): JSX.Element => {\r\n    return (\r\n        <Container>\r\n            <StatusMessage>\r\n            {spinner ?\r\n                <Spinner animation=\"border\" role=\"status\" variant=\"success\">\r\n                    <span className=\"sr-only\">{message}</span>\r\n                </Spinner> \r\n            :\r\n                <Text>{message}</Text>\r\n            }\r\n            </StatusMessage>\r\n        </Container>\r\n    )\r\n}\r\n","import styled from 'styled-components';\r\n\r\n\r\nexport const HeaderWrapper = styled.header`\r\n    min-height: 10vh;\r\n    height: 100%;\r\n    background-color: #006B53;\r\n    margin-bottom: 1em;\r\n`\r\nexport const HeaderInner = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    padding: 1em 0;\r\n`\r\n\r\nexport const InnerText = styled.span`\r\n    font-size: 2em;\r\n    font-style: italic;\r\n    padding-right: .4em;\r\n    color: #fff;\r\n\r\n    @media screen and (max-width: 1024px) {\r\n        font-size: 1.2em;\r\n    }\r\n\r\n    @media screen and (max-width: 500px) {\r\n        font-size: .8em;\r\n    }\r\n\r\n    @media screen and (max-width: 300px) {\r\n        font-size: .7em;\r\n    }\r\n`\r\n\r\nexport const InnerIcon = styled.span`\r\n    font-size: 1.6em;\r\n    \r\n    @media screen and (max-width: 1024px) {\r\n        font-size: 1.2em;\r\n    }\r\n\r\n    @media screen and (max-width: 500px) {\r\n        font-size: .8em;\r\n    }\r\n\r\n    @media screen and (max-width: 300px) {\r\n        font-size: .7em;\r\n    }\r\n`","import Container from 'react-bootstrap/Container';\r\n\r\nimport { \r\n    HeaderWrapper, \r\n    HeaderInner, \r\n    InnerText, \r\n    InnerIcon } from '../../styles/Header';\r\n\r\n\r\nexport const Header = (): JSX.Element => {\r\n    return (\r\n        <HeaderWrapper>\r\n            <Container>\r\n                <HeaderInner>\r\n                    <InnerText>Найди своего пользователя!</InnerText>\r\n                    <InnerIcon role=\"img\" aria-label=\"search\">&#128270;</InnerIcon>\r\n                </HeaderInner>\r\n            </Container>\r\n        </HeaderWrapper>\r\n    )\r\n}\r\n","import styled from 'styled-components';\r\nimport { Table } from 'react-bootstrap';\r\n\r\n\r\nexport const MyTable = styled(Table)`\r\n    table-layout: fixed;\r\n    margin: 1em 0;\r\n\r\n    @media screen and (max-width: 1024px) {\r\n        table-layout: auto;\r\n    }\r\n\r\n    & tr th, & tr td {\r\n        @media screen and (max-width: 1024px) {\r\n            font-size: 0.7em;\r\n        }\r\n    }\r\n\r\n    & tbody {\r\n        display: block;\r\n        max-height: 100vh;\r\n        overflow-x: hidden;\r\n        overflow-y: auto;\r\n\r\n        &::-webkit-scrollbar { \r\n            width: 10px;\r\n        }\r\n    \r\n        &::-webkit-scrollbar-track-piece { \r\n            background-color: gray;\r\n        }\r\n    \r\n        &::-webkit-scrollbar-thumb { \r\n            background-color: #006B53;\r\n            border-radius: 15px;\r\n            height: 100px;\r\n        }\r\n    }\r\n`\r\n\r\nexport const UsersSearch = styled.input`\r\n    width: 100%;\r\n    border: none;\r\n    background-color: transparent;\r\n    transition: background-color 0s 50000s;\r\n\r\n    &::placeholder {\r\n        font-weight: 300;\r\n    }\r\n\r\n    @media screen and (max-width: 1024px) {\r\n        width: 100%;\r\n        font-size: 0.8em;\r\n    }\r\n`\r\n\r\nexport const Card = styled.div`\r\n    display: flex;\r\n    padding: .4em;\r\n    margin-bottom: .5em;\r\n\r\n    @media screen and (max-width: 1200px) {\r\n        flex-wrap: wrap;\r\n        justify-content: center;\r\n    }\r\n`\r\n\r\nexport const CardImg = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    margin-right: 1em;\r\n\r\n    @media screen and (max-width: 1024px) {\r\n        width: 100%;\r\n        margin: 0;\r\n    }\r\n    \r\n    & img {\r\n        border-radius: 50%;\r\n        height: 80%;\r\n    }\r\n`\r\n\r\nexport const CardInfo = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n` \r\n\r\nexport const InfoInline = styled.div`\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n\r\n    @media screen and (max-width: 1024px) {\r\n        justify-content: center;\r\n    }\r\n`\r\n\r\nexport const InlineName = styled.p`\r\n    font-style: italic;\r\n    margin-right: .5em;\r\n\r\n    @media screen and (max-width: 1024px) {\r\n        margin-right: 0;\r\n    }    \r\n    \r\n    @media screen and (max-width: 500px) {\r\n        font-size: .7em;\r\n    }\r\n`\r\n\r\nexport const InlineRegistered = styled.p`\r\n    text-align: center;\r\n\r\n    @media screen and (max-width: 500px) {\r\n        font-size: .7em;\r\n    }\r\n\r\n    & span:first-child {\r\n        font-size: 1em;\r\n        font-weight: 900;\r\n\r\n        @media screen and (max-width: 500px) {\r\n            font-size: .7em;\r\n        }\r\n    }\r\n\r\n    & span:last-child {\r\n        font-size: .9em;\r\n    }\r\n`\r\n\r\nexport const InfoBlock = styled.div`\r\n    @media screen and (max-width: 1024px) {\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n`\r\n\r\nexport const BlockMail = styled.p`\r\n    font-size: .9em;\r\n\r\n    @media screen and (max-width: 500px) {\r\n        font-size: .7em;\r\n    }\r\n`","import { useContext } from 'react';\r\nimport moment from 'moment';\r\nimport Context from '../../services/context';\r\n\r\nimport {\r\n    Card,\r\n    CardImg,\r\n    CardInfo,\r\n    InfoInline,\r\n    InlineName,\r\n    InlineRegistered,\r\n    InfoBlock,\r\n    BlockMail } from '../../styles/Users';\r\n\r\n\r\nexport const UsersCards = (): JSX.Element => {\r\n    const listProps = useContext(Context);\r\n\r\n    return (\r\n        <>\r\n        {listProps.usersList.map(({ registered: { age, date }, email, name: { first, last }, picture: { medium } }) =>\r\n        <tr key={date}>\r\n            <td>\r\n                <Card>\r\n                    <CardImg>\r\n                        <img src={medium} alt={`${first} ${last}`} />\r\n                    </CardImg>\r\n                    <CardInfo>\r\n                        <InfoInline>\r\n                            <InlineName>{`${first} ${last}.`}</InlineName>\r\n                            <InlineRegistered>\r\n                                <span>Дата регистрации: </span> \r\n                                <span>{moment(date).format('L')} </span>\r\n                            </InlineRegistered>\r\n                        </InfoInline>\r\n                        <InfoBlock>\r\n                            <BlockMail>{email}</BlockMail>\r\n                        </InfoBlock>\r\n                    </CardInfo>\r\n                </Card>\r\n            </td>\r\n        </tr>\r\n        )}\r\n        </>\r\n    )\r\n}\r\n","import Container from 'react-bootstrap/Container';\r\n\r\nimport { MyTable, UsersSearch } from '../../styles/Users';\r\n\r\nimport { UsersCards } from './UsersCards';\r\n\r\n\r\nexport const Users = (): JSX.Element => {\r\n    return (\r\n        <Container>\r\n            <MyTable striped bordered hover responsive>\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            <UsersSearch \r\n                                type=\"text\" \r\n                                placeholder=\"Поиск..\"\r\n                            />\r\n                        </th>\r\n                        <th>Избранные</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <UsersCards />\r\n                </tbody>\r\n            </MyTable>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n","import { useState, useEffect } from 'react';\nimport axios from '../services/axios';\nimport Context  from '../services/context';\n\nimport { IResultData } from '../interfaces/interface';\nimport { GlobalStyle } from '../styles/GlobalStyle';\n\nimport { Status } from './Status';\nimport { Header } from '../Components/Header/Header';\nimport { Users } from '../Components/Users/Users';\n\n\nconst App = (): JSX.Element => {\n    const [usersList, setUsersList] = useState<Array<IResultData>>([]);\n    const [error, setError] = useState<boolean>(false);\n    const [loaded, setLoaded] = useState<boolean>(false);\n\n    useEffect(() => {\n        axios\n        .get('https://randomuser.me/api/?results=15')\n        .then(response => {\n            if (response.data.length !== 0) {\n                setLoaded(true);\n                setUsersList(response.data.results);\n            } else {\n                setError(true);\n            }\n        })\n        .catch((err) => (err.response || err.request) && setError(true))\n    }, []);\n    \n\n    if (error) {\n        return (\n            <>\n            <GlobalStyle />\n                <Header />\n                <Status message=\"Не удалось подключиться к серверу\" />\n            </>\n        )\n    } \n    \n    if (!loaded) {\n        return (\n            <>\n            <GlobalStyle />\n                <Header />\n                <Status message=\"Загружаю...\" spinner={true} />\n            </>\n        )\n    } \n\n    return (\n        <Context.Provider value={{ usersList }}>\n        <GlobalStyle />\n            <Header />\n            <Users />\n        </Context.Provider>\n    );\n\n}\n\nexport default App;\n","import { render } from 'react-dom';\n\nimport App from './Components/App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/fonts/lato/stylesheet.css';\n\n\nrender(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}